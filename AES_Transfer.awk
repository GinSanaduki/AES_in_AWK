#!/usr/bin/gawk -f
# AES_Transfer.awk
# gawk -f AES_Transfer.awk
@include "FuncCipher.awk"
@include "FuncInvCipher.awk"

BEGIN{
	NBb = 16;
	Mask = strtonum("0xff");
	SBOXSET();
	invSBOXSET();
	
	# --------------------------------------------------------------
	
	testset("128");
	# 暗号化するための鍵の準備
	KeyExpansion();
	# NBbにて 16バイトと定義している
	for(i in init_Arrays){
		data_Arrays[i] = init_Arrays[i];
	}
	print "<FIPS 197  P.35 Appendix C.1 AES-128 TEST>";
	print "";
	datadump("PLAINTEXT : ","data");
	datadump("KEY : ","key");
	Cipher();
	datadump("Encryption : ","data");
	invCipher();
	datadump("Decryption : ","data");
	print "";
	
	# --------------------------------------------------------------
	
	testset("192");
	# 暗号化するための鍵の準備
	KeyExpansion();
	# NBbにて 16バイトと定義している
	for(i in init_Arrays){
		data_Arrays[i] = init_Arrays[i];
	}
	print "<FIPS 197  P.38 Appendix C.2 AES-192 TEST>";
	print "";
	datadump("PLAINTEXT : ","data");
	datadump("KEY : ","key");
	Cipher();
	datadump("Encryption : ","data");
	invCipher();
	datadump("Decryption : ","data");
	print "";
	
	# --------------------------------------------------------------
	
	testset("256");
	# 暗号化するための鍵の準備
	KeyExpansion();
	# NBbにて 16バイトと定義している
	for(i in init_Arrays){
		data_Arrays[i] = init_Arrays[i];
	}
	print "<FIPS 197  P.42 Appendix C.3 AES-256 TEST>";
	print "";
	datadump("PLAINTEXT : ","data");
	datadump("KEY : ","key");
	Cipher();
	datadump("Encryption : ","data");
	invCipher();
	datadump("Decryption : ","data");
	print "";
	
	print "AES TEST END";
	
}

function datadump(datadump_c,ArrayWord){
	printf("%s",datadump_c);
	switch(ArrayWord){
		case "data":
			for(i in data_Arrays){
				n = and(data_Arrays[i],Mask);
				printf("%x", n / 16);
				printf("%x", n % 16);
			}
			break;
		case "key":
			for(i in key_Arrays){
				n = and(key_Arrays[i],Mask);
				printf("%x", n / 16);
				printf("%x", n % 16);
			}
			break;
		default:
			print "";
			print "Invalid Argument : datadump";
			exit 99;
	}
	printf("\n");
}

# FIPS 197  P.20 Figure 11
function KeyExpansion(){
	# FIPS 197  P.27 Appendix A.1 Rcon[i/Nk]
	Rcon_bk_tex = "0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36";
	split(Rcon_bk_tex,Rcon_bk_Arrays,",");
	# 0スタートにシフト
	for(i in Rcon_bk_Arrays){
		# Rcon_Arrays[i - 1] = Rcon_bk_Arrays[i];
		# 16進数だとわかりづらいので、この時点で変換しておく
		Rcon_Arrays[i - 1]  = strtonum(Rcon_bk_Arrays[i]);
	}
	# w = new byte[NBb*(nr+1)];
	# 0からNBb*(nr+1) - 1までの配列を生成
	lim = NBb * (nr + 1) - 1;
	# print "lim : "lim;
	for(i = 0; i <= lim; i++){
		w[i] = 0;
	}
	# System.arraycopy(key,0,w,0,nk);
	for(i in key_Arrays){
		if(i == nk){
			break;
		}
		w[i] = key_Arrays[i];
	}
	for(i = nk; i < lim; i = i + 4){
		# System.arraycopy(w,i-4,temp,0,4);
		# temp = w[i-1];
		# 初期化
		temp[0] = 0;
		temp[1] = 0;
		temp[2] = 0;
		temp[3] = 0;
		tempcnt = 0;
		for(j = i - 4; j < i;j++){
			temp[tempcnt] = w[j];
			tempcnt++;
		}
		if(i % nk == 0){
			RotWord();
			SubWord();
			Rcon_Pointer = i / nk - 1;
			temp[0] = xor(temp[0],Rcon_Arrays[Rcon_Pointer]);
		} else if(nk > 24 && (i % nk) == 16){
			SubWord();
		}
		# w[i] = w[i-nk] ^ temp;
		Pos1 = i;
		Pos2 = Pos1 - nk;
		Exor_w(Pos1,Pos2);
	}
}

# FIPS 197  P.20 Figure 11 */ /* FIPS 197  P.19  5.2
function SubWord(AND_Tex0,AND_Tex1,AND_Tex2,AND_Tex3){
	AND_Tex0 = and(temp[0],Mask);
	temp[0] = Sbox_Arrays[AND_Tex0];
	
	SubWord_Tex1 = strtonum(temp[1]);
	AND_Tex1 = and(SubWord_Tex1,Mask);
	temp[1] = Sbox_Arrays[AND_Tex1];
	
	SubWord_Tex2 = strtonum(temp[2]);
	AND_Tex2 = and(SubWord_Tex2,Mask);
	temp[2] = Sbox_Arrays[AND_Tex2];
	
	SubWord_Tex3 = strtonum(temp[3]);
	AND_Tex3 = and(SubWord_Tex3,Mask);
	temp[3] = Sbox_Arrays[AND_Tex3];
}

# ------------------------------------
# FIPS 197  P.20 Figure 11 */ /* FIPS 197  P.19  5.2
function RotWord(RotWord_TempTex){
	RotWord_TempTex = temp[0];
	temp[0] = temp[1];
	temp[1] = temp[2];
	temp[2] = temp[3];
	temp[3] = RotWord_TempTex;
}

# ------------------------------------

function testset(sw_bit){
	keys_bk_tex = "0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f";
	split(keys_bk_tex,keys_bk_Arrays,",");
	# 0スタートにシフト
	for(i in keys_bk_Arrays){
		# keys_Arrays[i - 1] = keys_bk_Arrays[i];
		# 16進数だとわかりづらいので、この時点で変換しておく
		keys_Arrays[i - 1] = strtonum(keys_bk_Arrays[i]);
	}
	init_bk_tex = "0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff";
	split(init_bk_tex,init_bk_Arrays,",");
	# 0スタートにシフト
	for(i in init_bk_Arrays){
		# init_Arrays[i - 1] = init_bk_Arrays[i];
		# 16進数だとわかりづらいので、この時点で変換しておく
		init_Arrays[i - 1] = strtonum(init_bk_Arrays[i]);
	}
	# 鍵の長さ 4,6,8(128,192,256 bit)
	switch(sw_bit){
		case "128":
			nk = 4;
			break;
		case "192":
			nk = 6;
			break;
		case "256":
			nk = 8;
			break;
		default:
			print "Invalid Argument. : testset"
			exit 99;
	}
	# ラウンド数 10,12,14
	nr = nk + 6;
	nk = nk * 4;
	for(i in keys_Arrays){
		if(i == nk){
			break;
		}
		key_Arrays[i] = keys_Arrays[i];
	}
}

# ------------------------------------

# FIPS 197  P.16 Figure 7
function SBOXSET(){
	Sbox_bk_tex = "0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16";
	split(Sbox_bk_tex,Sbox_bk_Arrays,",");
	# 0スタートにシフト
	for(i in Sbox_bk_Arrays){
		# Sbox_Arrays[i - 1] = Sbox_bk_Arrays[i];
		# 16進数だとわかりづらいので、この時点で変換しておく
		Sbox_Arrays[i - 1] = strtonum(Sbox_bk_Arrays[i]);
	}
	delete Sbox_bk_Arrays;
}

# FIPS 197  P.22 Figure 14
function invSBOXSET(){
	invSbox_bk_tex = "0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb,0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb,0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e,0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25,0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92,0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84,0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06,0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b,0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73,0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e,0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b,0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4,0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f,0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef,0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61,0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d";
	split(invSbox_bk_tex,invSbox_bk_Arrays,",");
	# 0スタートにシフト
	for(i in invSbox_bk_Arrays){
		# invSbox_Arrays[i - 1] = invSbox_bk_Arrays[i];
		# 16進数だとわかりづらいので、この時点で変換しておく
		invSbox_Arrays[i - 1] = strtonum(invSbox_bk_Arrays[i]);
	}
	delete invSbox_bk_Arrays;
}

